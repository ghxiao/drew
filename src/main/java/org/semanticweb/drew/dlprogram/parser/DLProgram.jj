options
{
  JDK_VERSION = "1.5";
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(DLProgramParser)
package org.semanticweb.drew.dlprogram.parser;

import org.semanticweb.drew.dlprogram.model.*;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLDataProperty;
import org.semanticweb.owlapi.model.OWLLogicalEntity;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;

import org.semanticweb.drew.default_logic.DefaultRule;
import org.semanticweb.drew.default_logic.OWLPredicate;

public class DLProgramParser {

	// namespace abbreviation to the full name
  Map < String, String > namespaces = new HashMap < String, String > ();

  // fragments to object properties
  Map < String, OWLObjectProperty > objectProperties = new HashMap <String, OWLObjectProperty> ();

  // fragments to object properties
  Map < String, OWLDataProperty > dataProperties = new HashMap <String, OWLDataProperty> ();
  
  // fragments to classes
  Map < String, OWLClass> classes = new HashMap < String, OWLClass> ();
  
  OWLOntology ontology;

  public void setOntology(OWLOntology ontology)
  {
        this.ontology = ontology;

        for(OWLObjectProperty op: ontology.getObjectPropertiesInSignature()){
        	IRI iri = op.getIRI();
        	objectProperties.put(iri.getFragment(), op);
        	objectProperties.put(iri.toString(), op);
        }

        for(OWLDataProperty op: ontology.getDataPropertiesInSignature()){
        	IRI iri = op.getIRI();
        	dataProperties.put(iri.getFragment(), op);
        	dataProperties.put(iri.toString(), op);
        }
        
        for(OWLClass cls : ontology.getClassesInSignature()){
        	IRI iri = cls.getIRI();
        	classes.put(iri.getFragment(), cls);
        	classes.put(iri.toString(), cls);
        }
  }

  private OWLLogicalEntity findLogicalEntity(String name) {
		if (classes.containsKey(name)) {
			return classes.get(name);
		} else if (objectProperties.containsKey(name)) {
			return objectProperties.get(name);
		} else if (dataProperties.containsKey(name)) {
			return dataProperties.get(name);
		} else {
		  	throw new IllegalArgumentException("No matched predicate from ontology: " + name);
		}
  }

  public void process() throws ParseException
  {}

  public void adjustDLInputOperationArity(DLProgram program)
  {
    for (DLInputSignature signature : program.getDLInputSignatures())
    {
      for (DLInputOperation op : signature.getOperations())
      {
        NormalPredicate inputPredicate = op.getInputPredicate();
        String name = inputPredicate.getName();
        int arity = CacheManager.getInstance().getArity(name);
        inputPredicate.setArity(arity);
      }
    }
  }
}

PARSER_END(DLProgramParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "%" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
}

TOKEN :
{
  < NAF : "not" >
| < TRUE : "True" >
| < NAMESPACE : "#namespace" >
| < CONJUNCTION : "," >
| < IMPLY : ":-" >
| < COLON : ":" >
| < ENDOFSTATEMENT : "." >
| < COMPARISON :
    ">"
  | ">="
  | "="
  | "<="
  | "<"
  | "!=" >
| < DL_ATOM : "DL" >
| < LEFT_SQUARE_BRACKET : "[" >
| < RIGHT_SQUARE_BRACKET : "]" >
| < HASH_LEADING_ID : "#" ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
| < LOWER_LEADING_ID : [ "a"-"z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
| < UPPER_LEADING_ID : [ "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
| < INTEGER :
    "0"
  | ([ "+", "-" ])? [ "1"-"9" ] ([ "0"-"9" ])* >
| < DOUBLE :
    (
      [ "1"-"9" ] ([ "0"-"9" ])*
    | "0"
    )
    "." ([ "0"-"9" ])* [ "1"-"9" ] >
| < STRING :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    | ("\\" [ "n", "t", "b", "r", "f", "\\", "'", "\"" ])
    )*
    "\"" >
| < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIVIDE : "/" >
| < LEFTBRACKET : "(" >
| < RIGHTBRACKET : ")" >
| < UPLUS : "+=" >
| < UMINUS : "-=" >
| < CAPMINUS : "~=" >
}



String dlPredicate() :
{
  String name;
}
{
  (
    LOOKAHEAD((< UPPER_LEADING_ID > | < LOWER_LEADING_ID >) < COLON >)
    (
      (
        < UPPER_LEADING_ID > | < LOWER_LEADING_ID >
      )
      {
        String key = token.image;
        String namespace = namespaces.get(key);
      }
      < COLON >
      (
        < UPPER_LEADING_ID > | < LOWER_LEADING_ID >
      )
      {
        name = namespace + token.image;
      }
    )
  |
    (
      < UPPER_LEADING_ID > | < LOWER_LEADING_ID >
    )
    {
      name = token.image;
    }
  | < STRING >  {
    name = token.image;
    name = name.substring(1, name.length() - 1);  }
  )
  {
    return name;
  }
}

DLInputOperation dlInputOperation() :
{
  DLInputOperation op = new DLInputOperation();
  String name;
}
{
  (
    (
      name = dlPredicate()
    )
    {
      
	  OWLLogicalEntity dlPredicate = findLogicalEntity(name);
      op.setDLPredicate(dlPredicate);
    }
    (
      < UPLUS >
      {
        op.setType(DLInputOperator.U_PLUS);
      }
    | < UMINUS >
      {
        op.setType(DLInputOperator.U_MINUS);
      }
    |  < CAPMINUS >
      {
        op.setType(DLInputOperator.CAP_MINUS);
      }
    )
    {
      name = dlPredicate();
      //The arity will be set later
      int arity = - 1;
      NormalPredicate predicate = CacheManager.getInstance().getPredicate(name, arity);
      op.setInputPredicate(predicate);
    }
  )
  {
    return op;
  }
}

DLInputSignature dlInputSignature() :
{
  DLInputSignature signature = new DLInputSignature();
  DLInputOperation op;
}
{
  (
    LOOKAHEAD(4)    (		LOOKAHEAD(2)
	    op = dlInputOperation()
	    {
	      signature.getOperations().add(op);
	    }
	    (
	      "," op = dlInputOperation()
	      {
	        signature.getOperations().add(op);
	      }
	    )*
    )?
    ";"
  )? 
  {
    return signature;
  }
}

DLAtomPredicate dlAtomPredicate() :
{
  DLAtomPredicate predicate = new DLAtomPredicate();
  DLInputSignature signature;
  String name;
  OWLLogicalEntity query;
}
{
  (
    < DL_ATOM > < LEFT_SQUARE_BRACKET > signature = dlInputSignature()
    {
      predicate.setInputSignature(signature);
    }
    
    (
      name = dlPredicate()
    )
    {
      query = findLogicalEntity(name);
      predicate.setQuery(query);
    }
    < RIGHT_SQUARE_BRACKET >
  )
  {
    return predicate;
  }
}

Constant constant() :
{
  String name;
  int type;
}
{
  (
    < INTEGER >
    {
      name = token.image;
      type = Types.INTEGER;
      return CacheManager.getInstance().getConstant(name, type);
    }
  | < STRING >
    {
      name = token.image.substring(1, token.image.length() - 1);
      type = Types.VARCHAR;
      return CacheManager.getInstance().getConstant(name, type);
    }
  | < LOWER_LEADING_ID >
    {
      name = token.image;
      type = Types.VARCHAR;
      return CacheManager.getInstance().getConstant(name, type);
    }
  )
  {}
}

Term variable() :
{}
{
  < UPPER_LEADING_ID >
  {
    return CacheManager.getInstance().getVariable(token.image);
  }
}

Functor functor() :
{
  Functor functor = new Functor();
}
{
  < LOWER_LEADING_ID >
  {
    functor.setName(token.image);
    return functor;
  }
}

Function function() :
{
  Function function = new Function();
  Functor functor;
  Term term;
}
{
  functor = functor()
  {
    function.setFunctor(functor);
  }
  < LEFTBRACKET >
  [
    term = term()
    {
      function.getTerms().add(term);
    }
    (
      "," term = term()
      {
        function.getTerms().add(term);
      }
    )*
  ]
  < RIGHTBRACKET >
  {
    return function;
  }
}

Term unary() :
{
  Term term;
}
{
  (
    LOOKAHEAD(function())
    term = function()
  | term = constant()
  | term = variable()
  | < LEFTBRACKET > term = additive() < RIGHTBRACKET >
  )
  {
    return term;
  }
}

Term multiplicative() :
{
  Term left, right;
  Token token;
}
{
  left = unary()
  {}
  (
    (
      token = < TIMES >
    | token = < DIVIDE >
    )
    right = unary()
    {
      Function function = new Function();
      Functor functor = new Functor();
      functor.setName(token.image);
      function.setFunctor(functor);
      function.getTerms().add(left);
      function.getTerms().add(right);
      left = function;
    }
  )*
  {
    return left;
  }
}

Term additive() :
{
  Term left, right;
  Token token;
}
{
  left = multiplicative()
  {}
  (
    (
      token = < PLUS >
    | token = < MINUS >
    )
    right = multiplicative()
    {
      Function function = new Function();
      Functor functor = new Functor();
      functor.setName(token.image);
      function.setFunctor(functor);
      function.getTerms().add(left);
      function.getTerms().add(right);
      left = function;
    }
  )*
  {
    return left;
  }
}

Term term() :
{
  Term term;
}
{
  term = additive()
  {
    return term;
  }
}





Literal literal() :
{
  Literal literal = new Literal();
  Predicate predicate = null;
  String name = null;
  Term term;
  int arity = 0;
  boolean isDLAtomPredicate = false;
  boolean neg = false; // -predicate
}
{
  LOOKAHEAD(term() < COMPARISON >)
  term = term()
  {
    literal.getTerms().add(term);
  }
  < COMPARISON >
  {
    predicate = CacheManager.getInstance().getPredicate(token.image, 2);
    literal.setPredicate(predicate);
  }
  term = term()
  {
    literal.getTerms().add(term);
  }
  {
    return literal;
  }
|
  (
    predicate = dlAtomPredicate()
    {
      isDLAtomPredicate = true;
    }
  |

	["-"	{
	  neg = true;	}
	]
  (    < HASH_LEADING_ID > | < LOWER_LEADING_ID > | <  UPPER_LEADING_ID > )
    {
   		name = token.image;
		if(neg)		{			literal.setNegative(true);
		}
    }
  )
  [
    "(" term = term()
    {
      literal.getTerms().add(term);
      arity++;
    }
    (
      "," term = term()
      {
        literal.getTerms().add(term);
        arity++;
      }
    )*
    ")"
  ]
  {
    if (!isDLAtomPredicate)
    {
      predicate = CacheManager.getInstance().getPredicate(name, arity);
    }
    else
    {
      predicate.setArity(arity);
    }
    literal.setPredicate(predicate);
    return literal;
  }
}

Clause clause() :
{
  Clause clause = new Clause();
  Literal literal;
  boolean not = false;
}
{
  [
    literal = literal()
    {
      clause.setHead(literal);
    }
  ]
  [
    < IMPLY >
    {
      // initialize the not state
      not = false;
    }
    [
      < NAF >
      {
        not = true;
      }
    ]
    literal = literal()
    {
      if (not)
      {
        clause.getNegativeBody().add(literal);
      }
      else
      {
        clause.getPositiveBody().add(literal);
      }
    }
    (
      < CONJUNCTION >
      {
        // initialize the not state
        not = false;
      }
      [
        < NAF >
        {
          not = true;
        }
      ]
      literal = literal()
      {
        if (not)
        {
          clause.getNegativeBody().add(literal);
        }
        else
        {
          clause.getPositiveBody().add(literal);
        }
      }
    )*
  ]
  < ENDOFSTATEMENT >
  {
    if (clause.getBody().size() == 0)
    {
      //Why we need this?
      //clause.getPositiveBody().add(Literal.TRUE);
    }
    return clause;
  }
}

void namespace() :
{
  String key, value;
}
{
  < NAMESPACE > < LEFTBRACKET > < STRING >
  {
    key = token.image.substring(1, token.image.length() - 1);
  }
  "," < STRING >
  {
    value = token.image.substring(1, token.image.length() - 1);
  }
  < RIGHTBRACKET > < ENDOFSTATEMENT >
  {
    namespaces.put(key, value);
  }
}

DLProgram program() :
{
  DLProgram program = new DLProgram();
  Clause clause;
}
{
  (
    namespace()
  )*
  (
    clause = clause()
    {
      if (clause.getHead().equals(Literal.FALSE) && (clause.getPositiveBody().contains(Literal.TRUE)))
      { // skip empty clause
      }
      else
      {
        program.add(clause);
        //program.getClauses().add(clause);
      }
    }
  )*
  < EOF >
  {
    adjustDLInputOperationArity(program);
    return program;
  }
}

List < Literal > getModel() :
{
  List < Literal > literals = new ArrayList < Literal > ();
  Literal literal;
}
{
  [ < TRUE > ":" ] "{" literal = literal()
  {
    literals.add(literal);
  }
  (
    < CONJUNCTION > literal = literal()
    {
      literals.add(literal);
    }
  )*
  "}"
  {
    return literals;
  }
  
}

Literal defaultLiteral() :
{	Literal literal = new Literal();
	OWLPredicate predicate;
	String predicateName;
	Term term;
	int arity = 0;
	boolean neg = false;
}
{
	["-"
	{
	  neg = true;
	}
	]
	predicateName = dlPredicate()	{
	  	} "(" term = term()
    {
      literal.getTerms().add(term);
      arity++;
    }
    (
      "," term = term()
      {
        literal.getTerms().add(term);
        arity++;
      }
    )*
    ")"	{ OWLLogicalEntity e;
	  if (ontology != null) {
			e = findLogicalEntity(predicateName);
			literal.setPredicate(new OWLPredicate(e));
		} else {
			if (ontology != null) {
				e = findLogicalEntity(predicateName);
			} else {
				if (arity == 1) {
					e = OWLManager.getOWLDataFactory().getOWLClass(IRI.create(predicateName));
				} else if (arity == 2) {
					e = OWLManager.getOWLDataFactory().getOWLObjectProperty(IRI.create(predicateName));
				} else {
					throw new IllegalStateException();
				}
			}
			literal.setPredicate(new OWLPredicate(e));
		}
		literal.setNegative(neg);
	  return literal;	}
}

List< Literal > conjunction() :
{
	List< Literal > literals = new ArrayList < Literal > ();
  	Literal literal;
}
{
  	literal = defaultLiteral()
	{
	  literals.add(literal);
	}

	 ( "&" literal = defaultLiteral()
	{
  	  literals.add(literal);
	}
	 ) *
	{
	  return literals;
	}
}

DefaultRule defaultRule() :
{
  DefaultRule df = new DefaultRule();
  List< Literal > prerequisite;
  List< Literal > justification;
  List< Literal > conclusion;
  List< Literal > typing;
}
{  "[" prerequisite = conjunction()
	{
	  df.setPrerequisite(prerequisite);	}
   [";" justification = conjunction()
	{
	  df.getJustifications().add(justification);
	}  
   ("," justification = conjunction()
	{
	  df.getJustifications().add(justification);
	}

   ) *] "]" "/" "[" conclusion = conjunction()
   {
     df.setConclusion(conclusion);   }"]" [
   //"<"
   < COMPARISON >   {
     if(!token.image.equals("<"))     {
       throw new ParseException("\'<\' is expected :" + token.image);     }   }
   typing = conjunction()   {
     df.setTyping(typing);   }
   < COMPARISON >   {
     if(!token.image.equals(">"))
     {
       throw new ParseException("\'>\' is expected :" + token.image);
     }   }
    ]
  {	return df;
  }	
}

List<DefaultRule > defaultRules() :{
  List<DefaultRule > rules = new ArrayList<DefaultRule >();
  DefaultRule rule;}
{
  (    rule = defaultRule()  {
    rules.add(rule);  }) *
  {
    return rules;  } }
