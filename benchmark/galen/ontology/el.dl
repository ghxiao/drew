% isa(X, X) :- nom(X).
isa(X, Y) :- isa1(X, Y).
triple(X, Y, Z) :- triple1(X, Y, Z).

self(X, V) :- nom(X), triple(X, V, X).
isa(X, Z) :- top(Z), isa(X, Z1).
% isa(X, Y) :- bot(Z), isa(U, Z), isa(X, Z1), cls(Y).
isa(X, Z) :- subClass(Y, Z), isa(X, Y).
isa(X, Z) :-subConj(Y1, Y2, Z), isa(X, Y1), isa(X, Y2).
isa(X, Z) :-subEx(V, Y, Z), triple(X, V, X1), isa(X1, Y).
isa(X, Z) :-subEx(V, Y, Z), self(X, V), isa(X, Y).
triple(X, V, X1) :- supEx(Y, V, Z, X1), isa(X, Y).
isa(X1, Z) :-supEx(Y, V, Z, X1), isa(X, Y).
isa(X, Z) :-subSelf(V, Z), self(X, V).
self(X, V) :-supSelf(Y, V), isa(X, Y).
triple(X, W, X1) :-subRole(V, W), triple(X, V, X1).
self(X, W) :- subRole(V, W), self(X, V).
triple(X, W, X11) :- subRChain(U, V, W), triple(X, U, X1), triple(X1, V, X11).
triple(X, W,X1) :-subRChain(U, V, W), self(X, U), triple(X, V, X1).
triple(X, W, X1) :-subRChain(U, V, W), triple(X, U, X1), self(X1, V).
triple(X, W, X) :-subRChain(U, V, W), self(X, U), self(X, V).
triple(X,W,X1) :-subRConj(V1,V2,W), triple(X,V1,X1), triple(X,V2,X1).
self(X, W) :-subRConj(V1, V2, W), self(X, V1), self(X, V2).
triple(X, W, X1) :-subProd(Y1, Y2, W), isa(X, Y1), isa(X1, Y2).
self(X, W) :-subProd(Y1, Y2, W), isa(X, Y1), isa(X, Y2).
isa(X, Z1) :-supProd(V, Z1, Z2), triple(X, V, X1).
isa(X, Z1) :-supProd(V, Z1, Z2), self(X, V).
isa(X1, Z2) :-supProd(V, Z1, Z2), triple(X, V, X1).
isa(X, Z2) :-supProd(V, Z1, Z2), self(X, V).
isa(Y, Z) :-isa(X, Y), nom(Y), isa(X, Z).
isa(X, Z) :-isa(X, Y), nom(Y), isa(Y, Z).
triple(Z, U, Y) :- isa(X, Y), nom(Y), triple(Z, U, X).

bot("Nothing").

%subClass(c1,c2).
% isa(a,c1).
% supEx(c1, r1, c2, ax1).
% subClass(c2, c3).
% subEx(r1, c3, c4).

% subConj("A1", "A2", "A").
% isa("a", "A2").
% subEx("R", "C", "D").
% supEx("A", "R", "B", e0).
% subClass("B", "C").
% isa("a", "A1").
% nom("a").
% role("R").
% class("Thing").
% class("A2").
% class("C").
% class("A").
% class("D").
% class("B").
% class("A1").